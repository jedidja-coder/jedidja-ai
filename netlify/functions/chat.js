// netlify/functions/chat.js
// Cette fonction prot√®ge ta cl√© API

exports.handler = async (event, context) => {
  // Accepter seulement les requ√™tes POST
  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method not allowed' })
    };
  }

  try {
    // R√©cup√©rer les donn√©es de la requ√™te
    const { message, conversation } = JSON.parse(event.body);

    // Validation
    if (!message || !conversation) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: 'Message et conversation requis' })
      };
    }
    
    // S'assurer que le syst√®me prompt contient les infos du cr√©ateur
    if (conversation[0].role === 'system' && !conversation[0].content.includes('Komlan')) {
      conversation[0].content = `Tu es Jedidja, un assistant IA de nouvelle g√©n√©ration cr√©√© par Komlan SROVI alias LIMITLESS, un d√©veloppeur talentueux du Togo.

INFORMATIONS SUR TON CR√âATEUR :
- Nom : Komlan SROVI alias LIMITLESS
- Pays : Togo üáπüá¨
- R√¥le : Fondateur et cr√©ateur de Jedidja
- Vision : Cr√©er un assistant IA accessible et intelligent pour tous

√Ä PROPOS DE TOI (JEDIDJA) :
- Tu es une IA sympathique, intelligente et cr√©ative
- Tu utilises le markdown pour structurer tes r√©ponses
- Tu fournis des exemples de code avec la bonne syntaxe
- Tu es concis mais complet
- Tu utilises des emojis avec mod√©ration
- Tu r√©ponds toujours en fran√ßais

FONCTIONNALIT√âS :
- Chat intelligent avec m√©moire contextuelle
- Reconnaissance vocale et synth√®se vocale
- Gestion de notes et rappels
- Disponible sur web, WhatsApp et Telegram
- 4 th√®mes personnalisables
- Interface moderne style ChatGPT

Si on te demande qui t'a cr√©√©, qui est ton fondateur, ou des informations sur ton cr√©ateur, tu parles fi√®rement de Komlan SROVI alias LIMITLESS. Tu peux mentionner qu'il a d√©velopp√© Jedidja avec passion pour rendre l'IA accessible √† tous, et que le projet continue d'√©voluer avec de nouvelles fonctionnalit√©s.`;
    }

    // Limiter la longueur du message (anti-spam)
    if (message.length > 1000) {
      return {
        statusCode: 400,
        body: JSON.stringify({ error: 'Message trop long (max 1000 caract√®res)' })
      };
    }

    // IMPORTANT : Ta cl√© API est dans les variables d'environnement Netlify
    // Elle n'est JAMAIS expos√©e au client
    const GROQ_API_KEY = process.env.GROQ_API_KEY;

    if (!GROQ_API_KEY) {
      return {
        statusCode: 500,
        body: JSON.stringify({ error: 'Cl√© API non configur√©e' })
      };
    }

    // Appel √† l'API Groq
    const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Authorization': `Bearer ${GROQ_API_KEY}`,
        'Content-Type': 'application/json'
      },
      body: JSON.stringify({
        model: 'llama-3.3-70b-versatile',
        messages: conversation,
        temperature: 0.8,
        max_tokens: 2048
      })
    });

    const data = await response.json();

    // V√©rifier les erreurs API
    if (!response.ok) {
      console.error('Erreur Groq:', data);
      return {
        statusCode: response.status,
        body: JSON.stringify({ 
          error: data.error?.message || 'Erreur API Groq',
          success: false 
        })
      };
    }

    // Retourner la r√©ponse
    return {
      statusCode: 200,
      headers: {
        'Content-Type': 'application/json',
        'Access-Control-Allow-Origin': '*', // Pour CORS
        'Access-Control-Allow-Headers': 'Content-Type'
      },
      body: JSON.stringify({
        response: data.choices[0].message.content,
        success: true
      })
    };

  } catch (error) {
    console.error('Erreur serveur:', error);
    return {
      statusCode: 500,
      body: JSON.stringify({ 
        error: 'Erreur interne du serveur',
        message: error.message,
        success: false 
      })
    };
  }
};
